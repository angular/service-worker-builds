{"version":3,"file":"service-worker.js","sources":["../src/low_level.ts","../src/push.ts","../src/update.ts","../src/module.ts","../service-worker.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ConnectableObservable, Observable, concat, defer, fromEvent, of , throwError} from 'rxjs';\nimport {filter, map, publish, switchMap, take, tap} from 'rxjs/operators';\n\nexport const ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\n\nexport interface Version {\n  hash: string;\n  appData?: Object;\n}\n\n/**\n * @experimental\n */\nexport interface UpdateAvailableEvent {\n  type: 'UPDATE_AVAILABLE';\n  current: Version;\n  available: Version;\n}\n\n/**\n * @experimental\n */\nexport interface UpdateActivatedEvent {\n  type: 'UPDATE_ACTIVATED';\n  previous?: Version;\n  current: Version;\n}\n\nexport type IncomingEvent = UpdateAvailableEvent | UpdateActivatedEvent;\n\nexport interface TypedEvent { type: string; }\n\ninterface StatusEvent {\n  type: 'STATUS';\n  nonce: number;\n  status: boolean;\n  error?: string;\n}\n\n\nfunction errorObservable(message: string): Observable<any> {\n  return defer(() => throwError(new Error(message)));\n}\n\n/**\n * @experimental\n*/\nexport class NgswCommChannel {\n  /**\n   * @internal\n   */\n  readonly worker: Observable<ServiceWorker>;\n\n  /**\n   * @internal\n   */\n  readonly registration: Observable<ServiceWorkerRegistration>;\n\n  /**\n   * @internal\n   */\n  readonly events: Observable<TypedEvent>;\n\n  constructor(private serviceWorker: ServiceWorkerContainer|undefined) {\n    if (!serviceWorker) {\n      this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n    } else {\n      const controllerChangeEvents =\n          <Observable<any>>(fromEvent(serviceWorker, 'controllerchange'));\n      const controllerChanges = <Observable<ServiceWorker|null>>(\n          controllerChangeEvents.pipe(map(() => serviceWorker.controller)));\n\n      const currentController =\n          <Observable<ServiceWorker|null>>(defer(() => of (serviceWorker.controller)));\n\n      const controllerWithChanges =\n          <Observable<ServiceWorker|null>>(concat(currentController, controllerChanges));\n      this.worker = <Observable<ServiceWorker>>(\n          controllerWithChanges.pipe(filter((c: ServiceWorker) => !!c)));\n\n      this.registration = <Observable<ServiceWorkerRegistration>>(\n          this.worker.pipe(switchMap(() => serviceWorker.getRegistration())));\n\n      const rawEvents = fromEvent(serviceWorker, 'message');\n\n      const rawEventPayload = rawEvents.pipe(map((event: MessageEvent) => event.data));\n      const eventsUnconnected =\n          (rawEventPayload.pipe(filter((event: Object) => !!event && !!(event as any)['type'])));\n      const events = eventsUnconnected.pipe(publish()) as ConnectableObservable<IncomingEvent>;\n      this.events = events;\n      events.connect();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  postMessage(action: string, payload: Object): Promise<void> {\n    return this.worker\n        .pipe(take(1), tap((sw: ServiceWorker) => {\n                sw.postMessage({\n                    action, ...payload,\n                });\n              }))\n        .toPromise()\n        .then(() => undefined);\n  }\n\n  /**\n   * @internal\n   */\n  postMessageWithStatus(type: string, payload: Object, nonce: number): Promise<void> {\n    const waitForStatus = this.waitForStatus(nonce);\n    const postMessage = this.postMessage(type, payload);\n    return Promise.all([waitForStatus, postMessage]).then(() => undefined);\n  }\n\n  /**\n   * @internal\n   */\n  generateNonce(): number { return Math.round(Math.random() * 10000000); }\n\n  /**\n   * @internal\n   */\n  // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n  // types flow correctly\n  eventsOfType<T extends TypedEvent>(type: string): Observable<T> {\n    return <Observable<T>>this.events.pipe(filter((event) => { return event.type === type; }));\n  }\n\n  /**\n   * @internal\n   */\n  // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n  // types flow correctly\n  nextEventOfType<T extends TypedEvent>(type: string): Observable<T> {\n    return <Observable<T>>(this.eventsOfType(type).pipe(take(1)));\n  }\n\n  /**\n   * @internal\n   */\n  waitForStatus(nonce: number): Promise<void> {\n    return this.eventsOfType<StatusEvent>('STATUS')\n        .pipe(\n            filter((event: StatusEvent) => event.nonce === nonce), take(1),\n            map((event: StatusEvent) => {\n              if (event.status) {\n                return undefined;\n              }\n              throw new Error(event.error !);\n            }))\n        .toPromise();\n  }\n\n  get isEnabled(): boolean { return !!this.serviceWorker; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {NEVER, Observable, Subject, merge} from 'rxjs';\nimport {map, switchMap, take} from 'rxjs/operators';\n\nimport {ERR_SW_NOT_SUPPORTED, NgswCommChannel} from './low_level';\n\n\n/**\n * Subscribe and listen to push notifications from the Service Worker.\n *\n * @experimental\n */\n@Injectable()\nexport class SwPush {\n  readonly messages: Observable<object>;\n  readonly subscription: Observable<PushSubscription|null>;\n\n  // TODO(issue/24571): remove '!'.\n  private pushManager !: Observable<PushManager>;\n  private subscriptionChanges: Subject<PushSubscription|null> =\n      new Subject<PushSubscription|null>();\n\n  constructor(private sw: NgswCommChannel) {\n    if (!sw.isEnabled) {\n      this.messages = NEVER;\n      this.subscription = NEVER;\n      return;\n    }\n    this.messages = this.sw.eventsOfType('PUSH').pipe(map((message: any) => message.data));\n\n    this.pushManager = this.sw.registration.pipe(\n        map((registration: ServiceWorkerRegistration) => { return registration.pushManager; }));\n\n    const workerDrivenSubscriptions = this.pushManager.pipe(\n        switchMap((pm: PushManager) => pm.getSubscription().then(sub => { return sub; })));\n    this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n  }\n\n  /**\n   * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n   * ServiceWorkerModule).\n   */\n  get isEnabled(): boolean { return this.sw.isEnabled; }\n\n  requestSubscription(options: {serverPublicKey: string}): Promise<PushSubscription> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const pushOptions: PushSubscriptionOptionsInit = {userVisibleOnly: true};\n    let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n    let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n    for (let i = 0; i < key.length; i++) {\n      applicationServerKey[i] = key.charCodeAt(i);\n    }\n    pushOptions.applicationServerKey = applicationServerKey;\n\n    return this.pushManager.pipe(switchMap((pm: PushManager) => pm.subscribe(pushOptions)), take(1))\n        .toPromise()\n        .then(sub => {\n          this.subscriptionChanges.next(sub);\n          return sub;\n        });\n  }\n\n  unsubscribe(): Promise<void> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n\n    const doUnsubscribe = (sub: PushSubscription | null) => {\n      if (sub === null) {\n        throw new Error('Not subscribed to push notifications.');\n      }\n\n      return sub.unsubscribe().then(success => {\n        if (!success) {\n          throw new Error('Unsubscribe failed!');\n        }\n\n        this.subscriptionChanges.next(null);\n      });\n    };\n\n    return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n  }\n\n  private decodeBase64(input: string): string { return atob(input); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {NEVER, Observable} from 'rxjs';\n\nimport {ERR_SW_NOT_SUPPORTED, NgswCommChannel, UpdateActivatedEvent, UpdateAvailableEvent} from './low_level';\n\n\n\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @experimental\n */\n@Injectable()\nexport class SwUpdate {\n  readonly available: Observable<UpdateAvailableEvent>;\n  readonly activated: Observable<UpdateActivatedEvent>;\n\n  constructor(private sw: NgswCommChannel) {\n    if (!sw.isEnabled) {\n      this.available = NEVER;\n      this.activated = NEVER;\n      return;\n    }\n    this.available = this.sw.eventsOfType<UpdateAvailableEvent>('UPDATE_AVAILABLE');\n    this.activated = this.sw.eventsOfType<UpdateActivatedEvent>('UPDATE_ACTIVATED');\n  }\n\n  /**\n   * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n   * ServiceWorkerModule).\n   */\n  get isEnabled(): boolean { return this.sw.isEnabled; }\n\n  checkForUpdate(): Promise<void> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const statusNonce = this.sw.generateNonce();\n    return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', {statusNonce}, statusNonce);\n  }\n\n  activateUpdate(): Promise<void> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const statusNonce = this.sw.generateNonce();\n    return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', {statusNonce}, statusNonce);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPlatformBrowser} from '@angular/common';\nimport {APP_INITIALIZER, ApplicationRef, InjectionToken, Injector, ModuleWithProviders, NgModule, PLATFORM_ID} from '@angular/core';\nimport {filter, take} from 'rxjs/operators';\n\nimport {NgswCommChannel} from './low_level';\nimport {SwPush} from './push';\nimport {SwUpdate} from './update';\n\nexport abstract class RegistrationOptions {\n  scope?: string;\n  enabled?: boolean;\n}\n\nexport const SCRIPT = new InjectionToken<string>('NGSW_REGISTER_SCRIPT');\n\nexport function ngswAppInitializer(\n    injector: Injector, script: string, options: RegistrationOptions,\n    platformId: string): Function {\n  const initializer = () => {\n    const app = injector.get<ApplicationRef>(ApplicationRef);\n    if (!(isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n          options.enabled !== false)) {\n      return;\n    }\n    const whenStable =\n        app.isStable.pipe(filter((stable: boolean) => !!stable), take(1)).toPromise();\n\n    // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n    // becomes active. This allows the SW to initialize itself even if there is no application\n    // traffic.\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      if (navigator.serviceWorker.controller !== null) {\n        navigator.serviceWorker.controller.postMessage({action: 'INITIALIZE'});\n      }\n    });\n\n    // Don't return the Promise, as that will block the application until the SW is registered, and\n    // cause a crash if the SW registration fails.\n    whenStable.then(() => navigator.serviceWorker.register(script, {scope: options.scope}));\n  };\n  return initializer;\n}\n\nexport function ngswCommChannelFactory(\n    opts: RegistrationOptions, platformId: string): NgswCommChannel {\n  return new NgswCommChannel(\n      isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n                                                                undefined);\n}\n\n/**\n * @experimental\n */\n@NgModule({\n  providers: [SwPush, SwUpdate],\n})\nexport class ServiceWorkerModule {\n  /**\n   * Register the given Angular Service Worker script.\n   *\n   * If `enabled` is set to `false` in the given options, the module will behave as if service\n   * workers are not supported by the browser, and the service worker will not be registered.\n   */\n  static register(script: string, opts: {scope?: string; enabled?: boolean;} = {}):\n      ModuleWithProviders {\n    return {\n      ngModule: ServiceWorkerModule,\n      providers: [\n        {provide: SCRIPT, useValue: script},\n        {provide: RegistrationOptions, useValue: opts},\n        {\n          provide: NgswCommChannel,\n          useFactory: ngswCommChannelFactory,\n          deps: [RegistrationOptions, PLATFORM_ID]\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: ngswAppInitializer,\n          deps: [Injector, SCRIPT, RegistrationOptions, PLATFORM_ID],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {NgswCommChannel as Éµangular_packages_service_worker_service_worker_e} from './src/low_level';\nexport {RegistrationOptions as Éµangular_packages_service_worker_service_worker_a,SCRIPT as Éµangular_packages_service_worker_service_worker_b,ngswAppInitializer as Éµangular_packages_service_worker_service_worker_c,ngswCommChannelFactory as Éµangular_packages_service_worker_service_worker_d} from './src/module';"],"names":[],"mappings":"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"}