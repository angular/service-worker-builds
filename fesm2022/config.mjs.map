{"version":3,"file":"config.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/service-worker/config/src/duration.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/service-worker/config/src/glob.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/service-worker/config/src/generator.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nconst PARSE_TO_PAIRS = /([0-9]+[^0-9]+)/g;\nconst PAIR_SPLIT = /^([0-9]+)([dhmsu]+)$/;\n\nexport function parseDurationToMs(duration: string): number {\n  const matches: string[] = [];\n\n  let array: RegExpExecArray | null;\n  while ((array = PARSE_TO_PAIRS.exec(duration)) !== null) {\n    matches.push(array[0]);\n  }\n  return matches\n    .map((match) => {\n      const res = PAIR_SPLIT.exec(match);\n      if (res === null) {\n        throw new Error(`Not a valid duration: ${match}`);\n      }\n      let factor: number = 0;\n      switch (res[2]) {\n        case 'd':\n          factor = 86400000;\n          break;\n        case 'h':\n          factor = 3600000;\n          break;\n        case 'm':\n          factor = 60000;\n          break;\n        case 's':\n          factor = 1000;\n          break;\n        case 'u':\n          factor = 1;\n          break;\n        default:\n          throw new Error(`Not a valid duration unit: ${res[2]}`);\n      }\n      return parseInt(res[1]) * factor;\n    })\n    .reduce((total, value) => total + value, 0);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\n\nconst TO_ESCAPE_BASE = [\n  {replace: /\\./g, with: '\\\\.'},\n  {replace: /\\+/g, with: '\\\\+'},\n  {replace: /\\*/g, with: WILD_SINGLE},\n];\nconst TO_ESCAPE_WILDCARD_QM = [...TO_ESCAPE_BASE, {replace: /\\?/g, with: QUESTION_MARK}];\nconst TO_ESCAPE_LITERAL_QM = [...TO_ESCAPE_BASE, {replace: /\\?/g, with: '\\\\?'}];\n\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark ? TO_ESCAPE_LITERAL_QM : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex: string = '';\n  while (segments.length > 0) {\n    const segment = segments.pop()!;\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (segment, escape) => segment.replace(escape.replace, escape.with),\n        segment,\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {parseDurationToMs} from './duration';\nimport {Filesystem} from './filesystem';\nimport {globToRegex} from './glob';\nimport {AssetGroup, Config} from './in';\n\nconst DEFAULT_NAVIGATION_URLS = [\n  '/**', // Include all URLs.\n  '!/**/*.*', // Exclude URLs to files (containing a file extension in the last segment).\n  '!/**/*__*', // Exclude URLs containing `__` in the last segment.\n  '!/**/*__*/**', // Exclude URLs containing `__` in any other segment.\n];\n\n/**\n * Consumes service worker configuration files and processes them into control files.\n *\n * @publicApi\n */\nexport class Generator {\n  constructor(\n    readonly fs: Filesystem,\n    private baseHref: string,\n  ) {}\n\n  async process(config: Config): Promise<Object> {\n    const unorderedHashTable = {};\n    const assetGroups = await this.processAssetGroups(config, unorderedHashTable);\n\n    return {\n      configVersion: 1,\n      timestamp: Date.now(),\n      appData: config.appData,\n      index: joinUrls(this.baseHref, config.index),\n      assetGroups,\n      dataGroups: this.processDataGroups(config),\n      hashTable: withOrderedKeys(unorderedHashTable),\n      navigationUrls: processNavigationUrls(this.baseHref, config.navigationUrls),\n      navigationRequestStrategy: config.navigationRequestStrategy ?? 'performance',\n      applicationMaxAge: config.applicationMaxAge\n        ? parseDurationToMs(config.applicationMaxAge)\n        : undefined,\n    };\n  }\n\n  private async processAssetGroups(\n    config: Config,\n    hashTable: {[file: string]: string | undefined},\n  ): Promise<Object[]> {\n    // Retrieve all files of the build.\n    const allFiles = await this.fs.list('/');\n    const seenMap = new Set<string>();\n    const filesPerGroup = new Map<AssetGroup, string[]>();\n\n    // Computed which files belong to each asset-group.\n    for (const group of config.assetGroups || []) {\n      if ((group.resources as any).versionedFiles) {\n        throw new Error(\n          `Asset-group '${group.name}' in 'ngsw-config.json' uses the 'versionedFiles' option, ` +\n            \"which is no longer supported. Use 'files' instead.\",\n        );\n      }\n\n      const fileMatcher = globListToMatcher(group.resources.files || []);\n      const matchedFiles = allFiles\n        .filter(fileMatcher)\n        .filter((file) => !seenMap.has(file))\n        .sort();\n\n      matchedFiles.forEach((file) => seenMap.add(file));\n      filesPerGroup.set(group, matchedFiles);\n    }\n\n    // Compute hashes for all matched files and add them to the hash-table.\n    const allMatchedFiles = ([] as string[]).concat(...Array.from(filesPerGroup.values())).sort();\n    const allMatchedHashes = await processInBatches(allMatchedFiles, 500, (file) =>\n      this.fs.hash(file),\n    );\n    allMatchedFiles.forEach((file, idx) => {\n      hashTable[joinUrls(this.baseHref, file)] = allMatchedHashes[idx];\n    });\n\n    // Generate and return the processed asset-groups.\n    return Array.from(filesPerGroup.entries()).map(([group, matchedFiles]) => ({\n      name: group.name,\n      installMode: group.installMode || 'prefetch',\n      updateMode: group.updateMode || group.installMode || 'prefetch',\n      cacheQueryOptions: buildCacheQueryOptions(group.cacheQueryOptions),\n      urls: matchedFiles.map((url) => joinUrls(this.baseHref, url)),\n      patterns: (group.resources.urls || []).map((url) => urlToRegex(url, this.baseHref, true)),\n    }));\n  }\n\n  private processDataGroups(config: Config): Object[] {\n    return (config.dataGroups || []).map((group) => {\n      return {\n        name: group.name,\n        patterns: group.urls.map((url) => urlToRegex(url, this.baseHref, true)),\n        strategy: group.cacheConfig.strategy || 'performance',\n        maxSize: group.cacheConfig.maxSize,\n        maxAge: parseDurationToMs(group.cacheConfig.maxAge),\n        timeoutMs: group.cacheConfig.timeout && parseDurationToMs(group.cacheConfig.timeout),\n        refreshAheadMs:\n          group.cacheConfig.refreshAhead && parseDurationToMs(group.cacheConfig.refreshAhead),\n        cacheOpaqueResponses: group.cacheConfig.cacheOpaqueResponses,\n        cacheQueryOptions: buildCacheQueryOptions(group.cacheQueryOptions),\n        version: group.version !== undefined ? group.version : 1,\n      };\n    });\n  }\n}\n\nexport function processNavigationUrls(\n  baseHref: string,\n  urls = DEFAULT_NAVIGATION_URLS,\n): {positive: boolean; regex: string}[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.slice(1);\n    return {positive, regex: `^${urlToRegex(url, baseHref)}$`};\n  });\n}\n\nasync function processInBatches<I, O>(\n  items: I[],\n  batchSize: number,\n  processFn: (item: I) => O | Promise<O>,\n): Promise<O[]> {\n  const batches = [];\n\n  for (let i = 0; i < items.length; i += batchSize) {\n    batches.push(items.slice(i, i + batchSize));\n  }\n\n  return batches.reduce(\n    async (prev, batch) =>\n      (await prev).concat(await Promise.all(batch.map((item) => processFn(item)))),\n    Promise.resolve<O[]>([]),\n  );\n}\n\nfunction globListToMatcher(globs: string[]): (file: string) => boolean {\n  const patterns = globs.map((pattern) => {\n    if (pattern.startsWith('!')) {\n      return {\n        positive: false,\n        regex: new RegExp('^' + globToRegex(pattern.slice(1)) + '$'),\n      };\n    } else {\n      return {\n        positive: true,\n        regex: new RegExp('^' + globToRegex(pattern) + '$'),\n      };\n    }\n  });\n  return (file: string) => matches(file, patterns);\n}\n\nfunction matches(file: string, patterns: {positive: boolean; regex: RegExp}[]): boolean {\n  return patterns.reduce((isMatch, pattern) => {\n    if (pattern.positive) {\n      return isMatch || pattern.regex.test(file);\n    } else {\n      return isMatch && !pattern.regex.test(file);\n    }\n  }, false);\n}\n\nfunction urlToRegex(url: string, baseHref: string, literalQuestionMark?: boolean): string {\n  if (!url.startsWith('/') && url.indexOf('://') === -1) {\n    // Prefix relative URLs with `baseHref`.\n    // Strip a leading `.` from a relative `baseHref` (e.g. `./foo/`), since it would result in an\n    // incorrect regex (matching a literal `.`).\n    url = joinUrls(baseHref.replace(/^\\.(?=\\/)/, ''), url);\n  }\n\n  return globToRegex(url, literalQuestionMark);\n}\n\nfunction joinUrls(a: string, b: string): string {\n  if (a.endsWith('/') && b.startsWith('/')) {\n    return a + b.slice(1);\n  } else if (!a.endsWith('/') && !b.startsWith('/')) {\n    return a + '/' + b;\n  }\n  return a + b;\n}\n\nfunction withOrderedKeys<T extends {[key: string]: any}>(unorderedObj: T): T {\n  const orderedObj = {} as {[key: string]: any};\n  Object.keys(unorderedObj)\n    .sort()\n    .forEach((key) => (orderedObj[key] = unorderedObj[key]));\n  return orderedObj as T;\n}\n\nfunction buildCacheQueryOptions(\n  inOptions?: Pick<CacheQueryOptions, 'ignoreSearch'>,\n): CacheQueryOptions {\n  return {\n    ignoreVary: true,\n    ...inOptions,\n  };\n}\n"],"names":["PARSE_TO_PAIRS","matches","map","match","res","PAIR_SPLIT","Error","factor","QUESTION_MARK","replace","with","WILD_SINGLE","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_BASE","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","segments","split","regex","length","segment","pop","WILD_OPEN","toEscape","process","config","unorderedHashTable","assetGroups","processAssetGroups","configVersion","timestamp","Date","now","appData","joinUrls","baseHref","index","processDataGroups","hashTable","withOrderedKeys","processNavigationUrls","navigationUrls","navigationRequestStrategy","applicationMaxAge","parseDurationToMs","allFiles","fs","list","Set","Map","group","versionedFiles","name","fileMatcher","globListToMatcher","resources","files","filter","file","seenMap","has","sort","forEach","add","concat","Array","from","filesPerGroup","values","processInBatches","allMatchedFiles","hash","idx","allMatchedHashes","entries","matchedFiles","installMode","updateMode","cacheQueryOptions","buildCacheQueryOptions","patterns","urls","url","urlToRegex","dataGroups","strategy","cacheConfig","maxSize","maxAge","timeoutMs","timeout","refreshAheadMs","refreshAhead","cacheOpaqueResponses","version","undefined","DEFAULT_NAVIGATION_URLS","startsWith","positive","items","processFn","i","batchSize","slice","globs","pattern","RegExp","reduce","isMatch","test"],"mappings":"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"}