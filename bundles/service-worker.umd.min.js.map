{"version":3,"sources":["service-worker.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","serviceWorker","common","core","Rx","Observable","prototype","this","_angular_common","_angular_core","rxjs_operator_filter","rxjs_operator_take","rxjs_operator_toPromise","rxjs_observable_concat","rxjs_observable_defer","rxjs_observable_fromEvent","rxjs_observable_of","rxjs_observable_throw","rxjs_operator_do","rxjs_operator_map","rxjs_operator_publish","rxjs_operator_switchMap","rxjs_Subject","rxjs_observable_merge","rxjs_observable_never","errorObservable","message","defer","_throw","Error","ngswAppInitializer","injector","script","options","platformId","app","get","ApplicationRef","isPlatformBrowser","navigator","enabled","onStable","filter","call","isStable","stable","take","whenStable","toPromise","addEventListener","controller","postMessage","action","then","register","scope","ngswCommChannelFactory","opts","NgswCommChannel","undefined","__assign","Object","assign","t","s","i","n","arguments","length","p","hasOwnProperty","ERR_SW_NOT_SUPPORTED","controllerChangeEvents","fromEvent","controllerChanges","map","currentController","of","controllerWithChanges","concat","worker","c","registration","switchMap","getRegistration","rawEvents","rawEventPayload","event","data","eventsUnconnected","events","publish","connect","payload","sideEffect","_do","sw","postMessageWithStatus","type","nonce","waitForStatus","Promise","all","generateNonce","Math","round","random","eventsOfType","nextEventOfType","statusEventsWithNonce","singleStatusEvent","mapErrorAndValue","status","defineProperty","enumerable","configurable","ctorParameters","decorators","Inject","args","PLATFORM_ID","SwPush","subscriptionChanges","Subject","isEnabled","messages","never","subscription","pushManager","workerDrivenSubscriptions","pm","getSubscription","sub","merge","requestSubscription","_this","reject","pushOptions","userVisibleOnly","key","atob","serverPublicKey","replace","applicationServerKey","Uint8Array","ArrayBuffer","charCodeAt","subscribe","subscribeOnce","next","unsubscribe","success","unsubscribeOnce","Injectable","SwUpdate","available","activated","checkForUpdate","statusNonce","activateUpdate","RegistrationOptions","SCRIPT","InjectionToken","ServiceWorkerModule","ngModule","providers","provide","useValue","useFactory","deps","APP_INITIALIZER","Injector","multi","NgModule","ɵe","ɵa","ɵb","ɵc","ɵd","value"],"mappings":"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","file":"service-worker.umd.min.js","sourcesContent":["/**\n * @license Angular v5.2.11-a065dc2\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('rxjs/operator/filter'), require('rxjs/operator/take'), require('rxjs/operator/toPromise'), require('rxjs/observable/concat'), require('rxjs/observable/defer'), require('rxjs/observable/fromEvent'), require('rxjs/observable/of'), require('rxjs/observable/throw'), require('rxjs/operator/do'), require('rxjs/operator/map'), require('rxjs/operator/publish'), require('rxjs/operator/switchMap'), require('rxjs/Subject'), require('rxjs/observable/merge'), require('rxjs/observable/never')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core', 'rxjs/operator/filter', 'rxjs/operator/take', 'rxjs/operator/toPromise', 'rxjs/observable/concat', 'rxjs/observable/defer', 'rxjs/observable/fromEvent', 'rxjs/observable/of', 'rxjs/observable/throw', 'rxjs/operator/do', 'rxjs/operator/map', 'rxjs/operator/publish', 'rxjs/operator/switchMap', 'rxjs/Subject', 'rxjs/observable/merge', 'rxjs/observable/never'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.serviceWorker = {}),global.ng.common,global.ng.core,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx,global.Rx.Observable,global.Rx.Observable));\n}(this, (function (exports,_angular_common,_angular_core,rxjs_operator_filter,rxjs_operator_take,rxjs_operator_toPromise,rxjs_observable_concat,rxjs_observable_defer,rxjs_observable_fromEvent,rxjs_observable_of,rxjs_observable_throw,rxjs_operator_do,rxjs_operator_map,rxjs_operator_publish,rxjs_operator_switchMap,rxjs_Subject,rxjs_observable_merge,rxjs_observable_never) { 'use strict';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\n\r\n\r\nvar __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n};\n\n/**\n * @license Angular v5.2.11-a065dc2\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\n/**\n * @record\n */\n\n/**\n * \\@experimental\n * @record\n */\n\n/**\n * \\@experimental\n * @record\n */\n\n/**\n * @param {?} message\n * @return {?}\n */\nfunction errorObservable(message) {\n    return rxjs_observable_defer.defer(function () { return rxjs_observable_throw._throw(new Error(message)); });\n}\n/**\n * \\@experimental\n */\nvar NgswCommChannel = /** @class */ (function () {\n    function NgswCommChannel(serviceWorker, platformId) {\n        this.serviceWorker = serviceWorker;\n        if (!serviceWorker || !_angular_common.isPlatformBrowser(platformId)) {\n            this.serviceWorker = undefined;\n            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            var /** @type {?} */ controllerChangeEvents = /** @type {?} */ ((rxjs_observable_fromEvent.fromEvent(serviceWorker, 'controllerchange')));\n            var /** @type {?} */ controllerChanges = /** @type {?} */ ((rxjs_operator_map.map.call(controllerChangeEvents, function () { return serviceWorker.controller; })));\n            var /** @type {?} */ currentController = /** @type {?} */ ((rxjs_observable_defer.defer(function () { return rxjs_observable_of.of(serviceWorker.controller); })));\n            var /** @type {?} */ controllerWithChanges = /** @type {?} */ ((rxjs_observable_concat.concat(currentController, controllerChanges)));\n            this.worker = /** @type {?} */ ((rxjs_operator_filter.filter.call(controllerWithChanges, function (c) { return !!c; })));\n            this.registration = /** @type {?} */ ((rxjs_operator_switchMap.switchMap.call(this.worker, function () { return serviceWorker.getRegistration(); })));\n            var /** @type {?} */ rawEvents = rxjs_observable_fromEvent.fromEvent(serviceWorker, 'message');\n            var /** @type {?} */ rawEventPayload = /** @type {?} */ ((rxjs_operator_map.map.call(rawEvents, function (event) { return event.data; })));\n            var /** @type {?} */ eventsUnconnected = /** @type {?} */ ((rxjs_operator_filter.filter.call(rawEventPayload, function (event) { return !!event && !!(/** @type {?} */ (event))['type']; })));\n            var /** @type {?} */ events = /** @type {?} */ ((rxjs_operator_publish.publish.call(eventsUnconnected)));\n            this.events = events;\n            events.connect();\n        }\n    }\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} action\n     * @param {?} payload\n     * @return {?}\n     */\n    NgswCommChannel.prototype.postMessage = /**\n     * \\@internal\n     * @param {?} action\n     * @param {?} payload\n     * @return {?}\n     */\n    function (action, payload) {\n        var /** @type {?} */ worker = rxjs_operator_take.take.call(this.worker, 1);\n        var /** @type {?} */ sideEffect = rxjs_operator_do._do.call(worker, function (sw) {\n            sw.postMessage(__assign({ action: action }, payload));\n        });\n        return /** @type {?} */ ((rxjs_operator_toPromise.toPromise.call(sideEffect).then(function () { return undefined; })));\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} type\n     * @param {?} payload\n     * @param {?} nonce\n     * @return {?}\n     */\n    NgswCommChannel.prototype.postMessageWithStatus = /**\n     * \\@internal\n     * @param {?} type\n     * @param {?} payload\n     * @param {?} nonce\n     * @return {?}\n     */\n    function (type, payload, nonce) {\n        var /** @type {?} */ waitForStatus = this.waitForStatus(nonce);\n        var /** @type {?} */ postMessage = this.postMessage(type, payload);\n        return Promise.all([waitForStatus, postMessage]).then(function () { return undefined; });\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    NgswCommChannel.prototype.generateNonce = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { return Math.round(Math.random() * 10000000); };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    NgswCommChannel.prototype.eventsOfType = /**\n     * \\@internal\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return /** @type {?} */ ((rxjs_operator_filter.filter.call(this.events, function (event) { return event.type === type; })));\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    NgswCommChannel.prototype.nextEventOfType = /**\n     * \\@internal\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return /** @type {?} */ ((rxjs_operator_take.take.call(this.eventsOfType(type), 1)));\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} nonce\n     * @return {?}\n     */\n    NgswCommChannel.prototype.waitForStatus = /**\n     * \\@internal\n     * @param {?} nonce\n     * @return {?}\n     */\n    function (nonce) {\n        var /** @type {?} */ statusEventsWithNonce = /** @type {?} */ ((rxjs_operator_filter.filter.call(this.eventsOfType('STATUS'), function (event) { return event.nonce === nonce; })));\n        var /** @type {?} */ singleStatusEvent = /** @type {?} */ ((rxjs_operator_take.take.call(statusEventsWithNonce, 1)));\n        var /** @type {?} */ mapErrorAndValue = /** @type {?} */ ((rxjs_operator_map.map.call(singleStatusEvent, function (event) {\n            if (event.status) {\n                return undefined;\n            }\n            throw new Error(/** @type {?} */ ((event.error)));\n        })));\n        return rxjs_operator_toPromise.toPromise.call(mapErrorAndValue);\n    };\n    Object.defineProperty(NgswCommChannel.prototype, \"isEnabled\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !!this.serviceWorker; },\n        enumerable: true,\n        configurable: true\n    });\n    /** @nocollapse */\n    NgswCommChannel.ctorParameters = function () { return [\n        null,\n        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PLATFORM_ID,] },] },\n    ]; };\n    return NgswCommChannel;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe and listen to push notifications from the Service Worker.\n *\n * \\@experimental\n */\nvar SwPush = /** @class */ (function () {\n    function SwPush(sw) {\n        this.sw = sw;\n        this.subscriptionChanges = new rxjs_Subject.Subject();\n        if (!sw.isEnabled) {\n            this.messages = rxjs_observable_never.never();\n            this.subscription = rxjs_observable_never.never();\n            return;\n        }\n        this.messages =\n            rxjs_operator_map.map.call(this.sw.eventsOfType('PUSH'), function (message) { return message.data; });\n        this.pushManager = /** @type {?} */ ((rxjs_operator_map.map.call(this.sw.registration, function (registration) { return registration.pushManager; })));\n        var /** @type {?} */ workerDrivenSubscriptions = /** @type {?} */ ((rxjs_operator_switchMap.switchMap.call(this.pushManager, function (pm) { return pm.getSubscription().then(function (sub) { return sub; }); })));\n        this.subscription = rxjs_observable_merge.merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    Object.defineProperty(SwPush.prototype, \"isEnabled\", {\n        /**\n         * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n         * ServiceWorkerModule).\n         */\n        get: /**\n         * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n         * ServiceWorkerModule).\n         * @return {?}\n         */\n        function () { return this.sw.isEnabled; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    SwPush.prototype.requestSubscription = /**\n     * @param {?} options\n     * @return {?}\n     */\n    function (options) {\n        var _this = this;\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var /** @type {?} */ pushOptions = { userVisibleOnly: true };\n        var /** @type {?} */ key = atob(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        var /** @type {?} */ applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (var /** @type {?} */ i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        var /** @type {?} */ subscribe = /** @type {?} */ ((rxjs_operator_switchMap.switchMap.call(this.pushManager, function (pm) { return pm.subscribe(pushOptions); })));\n        var /** @type {?} */ subscribeOnce = rxjs_operator_take.take.call(subscribe, 1);\n        return (/** @type {?} */ (rxjs_operator_toPromise.toPromise.call(subscribeOnce))).then(function (sub) {\n            _this.subscriptionChanges.next(sub);\n            return sub;\n        });\n    };\n    /**\n     * @return {?}\n     */\n    SwPush.prototype.unsubscribe = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var /** @type {?} */ unsubscribe = rxjs_operator_switchMap.switchMap.call(this.subscription, function (sub) {\n            if (sub !== null) {\n                return sub.unsubscribe().then(function (success) {\n                    if (success) {\n                        _this.subscriptionChanges.next(null);\n                        return undefined;\n                    }\n                    else {\n                        throw new Error('Unsubscribe failed!');\n                    }\n                });\n            }\n            else {\n                throw new Error('Not subscribed to push notifications.');\n            }\n        });\n        var /** @type {?} */ unsubscribeOnce = rxjs_operator_take.take.call(unsubscribe, 1);\n        return /** @type {?} */ (rxjs_operator_toPromise.toPromise.call(unsubscribeOnce));\n    };\n    SwPush.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    SwPush.ctorParameters = function () { return [\n        { type: NgswCommChannel, },\n    ]; };\n    return SwPush;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * \\@experimental\n */\nvar SwUpdate = /** @class */ (function () {\n    function SwUpdate(sw) {\n        this.sw = sw;\n        if (!sw.isEnabled) {\n            this.available = rxjs_observable_never.never();\n            this.activated = rxjs_observable_never.never();\n            return;\n        }\n        this.available = this.sw.eventsOfType('UPDATE_AVAILABLE');\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n    }\n    Object.defineProperty(SwUpdate.prototype, \"isEnabled\", {\n        /**\n         * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n         * ServiceWorkerModule).\n         */\n        get: /**\n         * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n         * ServiceWorkerModule).\n         * @return {?}\n         */\n        function () { return this.sw.isEnabled; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    SwUpdate.prototype.checkForUpdate = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var /** @type {?} */ statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', { statusNonce: statusNonce }, statusNonce);\n    };\n    /**\n     * @return {?}\n     */\n    SwUpdate.prototype.activateUpdate = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var /** @type {?} */ statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', { statusNonce: statusNonce }, statusNonce);\n    };\n    SwUpdate.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    SwUpdate.ctorParameters = function () { return [\n        { type: NgswCommChannel, },\n    ]; };\n    return SwUpdate;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @abstract\n */\nvar RegistrationOptions = /** @class */ (function () {\n    function RegistrationOptions() {\n    }\n    return RegistrationOptions;\n}());\nvar SCRIPT = new _angular_core.InjectionToken('NGSW_REGISTER_SCRIPT');\n/**\n * @param {?} injector\n * @param {?} script\n * @param {?} options\n * @param {?} platformId\n * @return {?}\n */\nfunction ngswAppInitializer(injector, script, options, platformId) {\n    var /** @type {?} */ initializer = function () {\n        var /** @type {?} */ app = injector.get(_angular_core.ApplicationRef);\n        if (!(_angular_common.isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n            options.enabled !== false)) {\n            return;\n        }\n        var /** @type {?} */ onStable = /** @type {?} */ (rxjs_operator_filter.filter.call(app.isStable, function (stable) { return !!stable; }));\n        var /** @type {?} */ isStable = /** @type {?} */ (rxjs_operator_take.take.call(onStable, 1));\n        var /** @type {?} */ whenStable = /** @type {?} */ (rxjs_operator_toPromise.toPromise.call(isStable));\n        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n        // becomes active. This allows the SW to initialize itself even if there is no application\n        // traffic.\n        navigator.serviceWorker.addEventListener('controllerchange', function () {\n            if (navigator.serviceWorker.controller !== null) {\n                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\n            }\n        });\n        // Don't return the Promise, as that will block the application until the SW is registered, and\n        // cause a crash if the SW registration fails.\n        whenStable.then(function () { return navigator.serviceWorker.register(script, { scope: options.scope }); });\n    };\n    return initializer;\n}\n/**\n * @param {?} opts\n * @param {?} platformId\n * @return {?}\n */\nfunction ngswCommChannelFactory(opts, platformId) {\n    return new NgswCommChannel(opts.enabled !== false ? navigator.serviceWorker : undefined, platformId);\n}\n/**\n * \\@experimental\n */\nvar ServiceWorkerModule = /** @class */ (function () {\n    function ServiceWorkerModule() {\n    }\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     */\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     * @param {?} script\n     * @param {?=} opts\n     * @return {?}\n     */\n    ServiceWorkerModule.register = /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     * @param {?} script\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (script, opts) {\n        if (opts === void 0) { opts = {}; }\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [\n                { provide: SCRIPT, useValue: script },\n                { provide: RegistrationOptions, useValue: opts },\n                {\n                    provide: NgswCommChannel,\n                    useFactory: ngswCommChannelFactory,\n                    deps: [RegistrationOptions, _angular_core.PLATFORM_ID]\n                },\n                {\n                    provide: _angular_core.APP_INITIALIZER,\n                    useFactory: ngswAppInitializer,\n                    deps: [_angular_core.Injector, SCRIPT, RegistrationOptions, _angular_core.PLATFORM_ID],\n                    multi: true,\n                },\n            ],\n        };\n    };\n    ServiceWorkerModule.decorators = [\n        { type: _angular_core.NgModule, args: [{\n                    providers: [SwPush, SwUpdate],\n                },] },\n    ];\n    /** @nocollapse */\n    ServiceWorkerModule.ctorParameters = function () { return []; };\n    return ServiceWorkerModule;\n}());\n\nexports.ServiceWorkerModule = ServiceWorkerModule;\nexports.SwPush = SwPush;\nexports.SwUpdate = SwUpdate;\nexports.ɵe = NgswCommChannel;\nexports.ɵa = RegistrationOptions;\nexports.ɵb = SCRIPT;\nexports.ɵc = ngswAppInitializer;\nexports.ɵd = ngswCommChannelFactory;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=service-worker.umd.js.map\n"]}